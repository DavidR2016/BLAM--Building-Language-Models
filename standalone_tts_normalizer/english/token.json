{
    "token-definition":
    {
        "name": "South African English token classes",
        "language": "english",
        "lang-code": "eng-ZA",
        "description": "at least whitespace, prepunc, postpunc, alpha and unknown must be defined\nthe unknown class is a catch-all inverse of postpunc, just not greedy\nthe classes must be defined in the following order:\n  whitespace, prepunc, postpunc, <custom_class>..., alpha, unknown\nwhere 1 or more <custom_class> are your own classes in order of preference\nthe order of mask regex rules within a class does not matter\n\nall search patterns start with \"start of string\"\nsearch patterns of which the final char is alphanumeric end with \"word boundary\"",
        "version":
        {
            "major": 0,
            "minor": 1
        }
    },
    "token-classes":
    {
        "whitespace":
        {
            "mask":
            [
                "^\\s+"
            ]
        },
        "prepunc":
        {
            "mask":
            [
                "^[\"“„«'‘‚‹({[<`]+"
            ]
        },
        "postpunc":
        {
            "mask":
            [
                "^[\"”‟»'’‛›)}\\]>\\-;:,.?!]+"
            ]
        },
        "per":
        {
            "mask":
            [
                "^/(h|min|s|k?g|l|oz)\\b"
            ]
        },
        "operator":
        {
            "mask":
            [
                "^[/&]"
            ]
        },
        "money_big":
        {
            "mask":
            [
                "^(R|r|\\$|£|€)\\s*\\d+((\\s+|,)\\d\\d\\d)*(\\.\\d+((\\s+|,)\\d\\d\\d)*)?\\s*(million|m|billion|bn|trillion|tn)\\b"
            ]
        },
        "money_small":
        {
            "mask":
            [
                "^(R|r|\\$|£|€)\\s*0*1(?!(\\s+|,)\\d\\d\\d\\b)(\\.00)?\\b",
                "^0*1(\\.0+((\\s+|,)000)*)?\\s*c\\b"
            ]
        },
        "money":
        {
            "mask":
            [
                "^(R|r|\\$|£|€)\\s*\\d+((\\s+|,)\\d\\d\\d)*(\\.\\d\\d)?\\b",
                "^\\d+((\\s+|,)\\d\\d\\d)*(\\.\\d+((\\s+|,)\\d\\d\\d)*)*\\s*c\\b"
            ]
        },
        "time":
        {
            "mask":
            [
                "^[0-2]?[0-9][:hH][0-5][0-9](\\s*[AaPp]\\.?[Mm]\\.?)?\\b"
            ]
        },
        "date":
        {
            "mask":
            [
                "^((\\d?\\d[.\\-/]\\d?\\d[.\\-/]\\d\\d\\d\\d)|(\\d\\d\\d\\d[.\\-/]\\d?\\d[.\\-/]\\d?\\d))\\b"
            ]
        },
        "year":
        {
            "mask":
            [
                "^\\d\\d\\d\\d\\b"
            ],
            "collocs":
            {
                "before":
                [
                    "([jJ]an(\\.|uary)|[fF]eb(\\.|ruary)|[mM]ar(\\.|ch)|[aA]pr(\\.|il)|[mM]ay|[jJ]un(\\.|e)|[jJ]ul(\\.|y)|[aA]ug(\\.|ust)|[sS]ep(\\.|tember)|[oO]ct(\\.|ober)|[nN]ov(\\.|ember)|[dD]ec(\\.|ember))\\W*$",
                    "([iI]n|[dD]uring|[sS]ince|[uU]ntil|[fF]rom|[tT]o|[yY]ear)\\s+$"
                ],
                "after": [],
                "anywhere": []
            }
        },
        "phone":
        {
            "mask":
            [
                "^(\\+27|0)\\d\\d\\s*\\d\\d\\d\\d\\d\\d\\d\\b"
            ]
        },
        "measure_small":
        {
            "mask":
            [
                "^0*1(\\.0+((\\s+|,)000)*)?\\s*%",
                "^0*1(\\.0+((\\s+|,)000)*)?\\s*(h|min|s)\\b",
                "^0*1(\\.0+((\\s+|,)000)*)?\\s*[kcm]?[mgl]\\b",
                "^0*1(\\.0+((\\s+|,)000)*)?\\s*[TGMk]?[Wwb]\\b",
                "^0*1(\\.0+((\\s+|,)000)*)?\\s*(lb|oz)\\b"
            ]
        },
        "measure":
        {
            "mask":
            [
                "^\\d+((\\s+|,)\\d\\d\\d)*(\\.\\d+((\\s+|,)\\d\\d\\d)*)?\\s*%",
                "^\\d+((\\s+|,)\\d\\d\\d)*(\\.\\d+((\\s+|,)\\d\\d\\d)*)?\\s*(h|min|s)\\b",
                "^\\d+((\\s+|,)\\d\\d\\d)*(\\.\\d+((\\s+|,)\\d\\d\\d)*)?\\s*[kcm]?[mgl]\\b",
                "^\\d+((\\s+|,)\\d\\d\\d)*(\\.\\d+((\\s+|,)\\d\\d\\d)*)?\\s*[TGMk]?[Wwb]\\b",
                "^\\d+((\\s+|,)\\d\\d\\d)*(\\.\\d+((\\s+|,)\\d\\d\\d)*)?\\s*(lb|oz)\\b"
            ]
        },
        "float":
        {
            "mask":
            [
                "^-?\\d+((\\s+|,)\\d\\d\\d)*\\.\\d+((\\s+|,)\\d\\d\\d)*\\b"
            ]
        },
        "ord":
        {
            "mask":
            [
                "^\\d+((\\s+|,)\\d\\d\\d)*(-|\\s+)?(th|st|nd|rd)\\b"
            ]
        },
        "card":
        {
            "mask":
            [
                "^-?\\d+((\\s+|,)\\d\\d\\d)*\\b"
            ]
        },
        "letseq":
        {
            "mask":
            [
                "^[A-Z]\\b\\.?((?<=\\.)\\s*[A-Z]\\.)*"
            ]
        },
        "alnum":
        {
            "mask":
            [
                "^\\w*\\d\\w*\\b"
            ]
        },
        "alpha":
        {
            "mask":
            [
                "^\\w+(['‘’‛`]\\w+)?\\b"
            ]
        },
        "unknown":
        {
            "mask":
            [
                "^[^\"”‟»'’‛›)}\\]>\\-;:,.?!]"
            ]
        }
    }
}
